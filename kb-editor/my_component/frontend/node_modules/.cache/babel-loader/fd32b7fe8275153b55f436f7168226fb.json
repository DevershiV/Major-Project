{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dever\\\\Desktop\\\\DEV\\\\Work\\\\Novacept\\\\Rasa Bot\\\\repo\\\\ComposeServices\\\\kb-editor\\\\my_component\\\\frontend\\\\src\\\\MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport { AdaptiveCard } from \"adaptivecards-react\";\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"];\n      const botProp = this.props.args[\"botProp\"];\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 7\n        }\n      }, name.type === \"AdaptiveCard\" ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(AdaptiveCard, {\n        payload: name,\n        hostConfig: botProp.adaptiveCardsHostConfig,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      })) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }\n      }, \"Wrong JSON\"))\n      // <span>\n      //   Hello, {name}! &nbsp;\n      //   <button\n      //     style={style}\n      //     onClick={this.onClicked}\n      //     disabled={this.props.disabled}\n      //     onFocus={this._onFocus}\n      //     onBlur={this._onBlur}\n      //   >\n      //     Click Me!\n      //   </button>\n      //   <AdaptiveCard payload={card} hostConfig={hostConfig} />\n      // </span>\n      ;\n    };\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.numClicks));\n    };\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AdaptiveCard","MyComponent","state","numClicks","isFocused","render","name","props","args","botProp","theme","style","borderStyling","primaryColor","border","outline","type","adaptiveCardsHostConfig","onClicked","setState","prevState","setComponentValue","_onFocus","_onBlur"],"sources":["C:/Users/dever/Desktop/DEV/Work/Novacept/Rasa Bot/repo/ComposeServices/kb-editor/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\nimport { AdaptiveCard } from \"adaptivecards-react\"\r\ninterface State {\r\n  numClicks: number\r\n  isFocused: boolean\r\n}\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass MyComponent extends StreamlitComponentBase<State> {\r\n  public state = { numClicks: 0, isFocused: false }\r\n\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n    const name = this.props.args[\"name\"]\r\n    const botProp = this.props.args[\"botProp\"]\r\n\r\n    // Streamlit sends us a theme object via props that we can use to ensure\r\n    // that our component has visuals that match the active theme in a\r\n    // streamlit app.\r\n    const { theme } = this.props\r\n    const style: React.CSSProperties = {}\r\n\r\n    // Maintain compatibility with older versions of Streamlit that don't send\r\n    // a theme object.\r\n    if (theme) {\r\n      // Use the theme object to style our button border. Alternatively, the\r\n      // theme style is defined in CSS vars.\r\n      const borderStyling = `1px solid ${\r\n        this.state.isFocused ? theme.primaryColor : \"gray\"\r\n      }`\r\n      style.border = borderStyling\r\n      style.outline = borderStyling\r\n    }\r\n\r\n    // Show a button and some text.\r\n    // When the button is clicked, we'll increment our \"numClicks\" state\r\n    // variable, and send its new value back to Streamlit, where it'll\r\n    // be available to the Python program.\r\n    return (\r\n      <div>\r\n        {name.type === \"AdaptiveCard\" ? (\r\n          <div>\r\n            <AdaptiveCard\r\n              payload={name}\r\n              hostConfig={botProp.adaptiveCardsHostConfig}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div>Wrong JSON</div>\r\n        )}\r\n      </div>\r\n      // <span>\r\n      //   Hello, {name}! &nbsp;\r\n      //   <button\r\n      //     style={style}\r\n      //     onClick={this.onClicked}\r\n      //     disabled={this.props.disabled}\r\n      //     onFocus={this._onFocus}\r\n      //     onBlur={this._onBlur}\r\n      //   >\r\n      //     Click Me!\r\n      //   </button>\r\n      //   <AdaptiveCard payload={card} hostConfig={hostConfig} />\r\n      // </span>\r\n    )\r\n  }\r\n\r\n  /** Click handler for our \"Click Me!\" button. */\r\n  private onClicked = (): void => {\r\n    // Increment state.numClicks, and pass the new value back to\r\n    // Streamlit via `Streamlit.setComponentValue`.\r\n    this.setState(\r\n      (prevState) => ({ numClicks: prevState.numClicks + 1 }),\r\n      () => Streamlit.setComponentValue(this.state.numClicks)\r\n    )\r\n  }\r\n\r\n  /** Focus handler for our \"Click Me!\" button. */\r\n  private _onFocus = (): void => {\r\n    this.setState({ isFocused: true })\r\n  }\r\n\r\n  /** Blur handler for our \"Click Me!\" button. */\r\n  private _onBlur = (): void => {\r\n    this.setState({ isFocused: false })\r\n  }\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(MyComponent)\r\n"],"mappings":";AAAA,SACEA,SAAS,EACTC,sBAAsB,EACtBC,uBAAuB,QAClB,yBAAyB;AAChC,OAAOC,KAAK,MAAqB,OAAO;AACxC,SAASC,YAAY,QAAQ,qBAAqB;AAMlD;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASJ,sBAAsB,CAAQ;EAAA;IAAA;IAAA,KAC/CK,KAAK,GAAG;MAAEC,SAAS,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAM,CAAC;IAAA,KAE1CC,MAAM,GAAG,MAAiB;MAC/B;MACA;MACA,MAAMC,IAAI,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,MAAM,CAAC;MACpC,MAAMC,OAAO,GAAG,IAAI,CAACF,KAAK,CAACC,IAAI,CAAC,SAAS,CAAC;;MAE1C;MACA;MACA;MACA,MAAM;QAAEE;MAAM,CAAC,GAAG,IAAI,CAACH,KAAK;MAC5B,MAAMI,KAA0B,GAAG,CAAC,CAAC;;MAErC;MACA;MACA,IAAID,KAAK,EAAE;QACT;QACA;QACA,MAAME,aAAa,GAAI,aACrB,IAAI,CAACV,KAAK,CAACE,SAAS,GAAGM,KAAK,CAACG,YAAY,GAAG,MAC7C,EAAC;QACFF,KAAK,CAACG,MAAM,GAAGF,aAAa;QAC5BD,KAAK,CAACI,OAAO,GAAGH,aAAa;MAC/B;;MAEA;MACA;MACA;MACA;MACA,oBACE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACGN,IAAI,CAACU,IAAI,KAAK,cAAc,gBAC3B;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACE,oBAAC,YAAY;QACX,OAAO,EAAEV,IAAK;QACd,UAAU,EAAEG,OAAO,CAACQ,uBAAwB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAC5C,CACE,gBAEN;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACD;MAEH;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAAA;IAEJ,CAAC;IAAA,KAGOC,SAAS,GAAG,MAAY;MAC9B;MACA;MACA,IAAI,CAACC,QAAQ,CACVC,SAAS,KAAM;QAAEjB,SAAS,EAAEiB,SAAS,CAACjB,SAAS,GAAG;MAAE,CAAC,CAAC,EACvD,MAAMP,SAAS,CAACyB,iBAAiB,CAAC,IAAI,CAACnB,KAAK,CAACC,SAAS,CAAC,CACxD;IACH,CAAC;IAAA,KAGOmB,QAAQ,GAAG,MAAY;MAC7B,IAAI,CAACH,QAAQ,CAAC;QAAEf,SAAS,EAAE;MAAK,CAAC,CAAC;IACpC,CAAC;IAAA,KAGOmB,OAAO,GAAG,MAAY;MAC5B,IAAI,CAACJ,QAAQ,CAAC;QAAEf,SAAS,EAAE;MAAM,CAAC,CAAC;IACrC,CAAC;EAAA;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAeN,uBAAuB,CAACG,WAAW,CAAC"},"metadata":{},"sourceType":"module"}